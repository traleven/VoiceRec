.TH "opus_encoderctls" 3 "Sat Apr 6 2019" "Version 1.3-19-g3765a24" "Opus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
opus_encoderctls \- These are convenience macros for use with the \fCopus_encode_ctl\fP interface\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOPUS_SET_COMPLEXITY\fP(x)"
.br
.RI "Configures the encoder's computational complexity\&. "
.ti -1c
.RI "#define \fBOPUS_GET_COMPLEXITY\fP(x)"
.br
.RI "Gets the encoder's complexity configuration\&. "
.ti -1c
.RI "#define \fBOPUS_SET_BITRATE\fP(x)"
.br
.RI "Configures the bitrate in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_GET_BITRATE\fP(x)"
.br
.RI "Gets the encoder's bitrate configuration\&. "
.ti -1c
.RI "#define \fBOPUS_SET_VBR\fP(x)"
.br
.RI "Enables or disables variable bitrate (VBR) in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_GET_VBR\fP(x)"
.br
.RI "Determine if variable bitrate (VBR) is enabled in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_SET_VBR_CONSTRAINT\fP(x)"
.br
.RI "Enables or disables constrained VBR in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_GET_VBR_CONSTRAINT\fP(x)"
.br
.RI "Determine if constrained VBR is enabled in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_SET_FORCE_CHANNELS\fP(x)"
.br
.RI "Configures mono/stereo forcing in the encoder\&. "
.ti -1c
.RI "#define \fBOPUS_GET_FORCE_CHANNELS\fP(x)"
.br
.RI "Gets the encoder's forced channel configuration\&. "
.ti -1c
.RI "#define \fBOPUS_SET_MAX_BANDWIDTH\fP(x)"
.br
.RI "Configures the maximum bandpass that the encoder will select automatically\&. "
.ti -1c
.RI "#define \fBOPUS_GET_MAX_BANDWIDTH\fP(x)"
.br
.RI "Gets the encoder's configured maximum allowed bandpass\&. "
.ti -1c
.RI "#define \fBOPUS_SET_BANDWIDTH\fP(x)"
.br
.RI "Sets the encoder's bandpass to a specific value\&. "
.ti -1c
.RI "#define \fBOPUS_SET_SIGNAL\fP(x)"
.br
.RI "Configures the type of signal being encoded\&. "
.ti -1c
.RI "#define \fBOPUS_GET_SIGNAL\fP(x)"
.br
.RI "Gets the encoder's configured signal type\&. "
.ti -1c
.RI "#define \fBOPUS_SET_APPLICATION\fP(x)"
.br
.RI "Configures the encoder's intended application\&. "
.ti -1c
.RI "#define \fBOPUS_GET_APPLICATION\fP(x)"
.br
.RI "Gets the encoder's configured application\&. "
.ti -1c
.RI "#define \fBOPUS_GET_LOOKAHEAD\fP(x)"
.br
.RI "Gets the total samples of delay added by the entire codec\&. "
.ti -1c
.RI "#define \fBOPUS_SET_INBAND_FEC\fP(x)"
.br
.RI "Configures the encoder's use of inband forward error correction (FEC)\&. "
.ti -1c
.RI "#define \fBOPUS_GET_INBAND_FEC\fP(x)"
.br
.RI "Gets encoder's configured use of inband forward error correction\&. "
.ti -1c
.RI "#define \fBOPUS_SET_PACKET_LOSS_PERC\fP(x)"
.br
.RI "Configures the encoder's expected packet loss percentage\&. "
.ti -1c
.RI "#define \fBOPUS_GET_PACKET_LOSS_PERC\fP(x)"
.br
.RI "Gets the encoder's configured packet loss percentage\&. "
.ti -1c
.RI "#define \fBOPUS_SET_DTX\fP(x)"
.br
.RI "Configures the encoder's use of discontinuous transmission (DTX)\&. "
.ti -1c
.RI "#define \fBOPUS_GET_DTX\fP(x)"
.br
.RI "Gets encoder's configured use of discontinuous transmission\&. "
.ti -1c
.RI "#define \fBOPUS_SET_LSB_DEPTH\fP(x)"
.br
.RI "Configures the depth of signal being encoded\&. "
.ti -1c
.RI "#define \fBOPUS_GET_LSB_DEPTH\fP(x)"
.br
.RI "Gets the encoder's configured signal depth\&. "
.ti -1c
.RI "#define \fBOPUS_SET_EXPERT_FRAME_DURATION\fP(x)"
.br
.RI "Configures the encoder's use of variable duration frames\&. "
.ti -1c
.RI "#define \fBOPUS_GET_EXPERT_FRAME_DURATION\fP(x)"
.br
.RI "Gets the encoder's configured use of variable duration frames\&. "
.ti -1c
.RI "#define \fBOPUS_SET_PREDICTION_DISABLED\fP(x)"
.br
.RI "If set to 1, disables almost all use of prediction, making frames almost completely independent\&. "
.ti -1c
.RI "#define \fBOPUS_GET_PREDICTION_DISABLED\fP(x)"
.br
.RI "Gets the encoder's configured prediction status\&. "
.in -1c
.SH "Detailed Description"
.PP 
These are convenience macros for use with the \fCopus_encode_ctl\fP interface\&. 

They are used to generate the appropriate series of arguments for that call, passing the correct type, size and so on as expected for each particular request\&.
.PP
Some usage examples:
.PP
.PP
.nf
int ret;
ret = opus_encoder_ctl(enc_ctx, OPUS_SET_BANDWIDTH(OPUS_AUTO));
if (ret != OPUS_OK) return ret;

opus_int32 rate;
opus_encoder_ctl(enc_ctx, OPUS_GET_BANDWIDTH(&rate));

opus_encoder_ctl(enc_ctx, OPUS_RESET_STATE);
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBGeneric CTLs\fP, \fBOpus Encoder\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define OPUS_GET_APPLICATION(x)"

.PP
Gets the encoder's configured application\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_APPLICATION\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB\fBOPUS_APPLICATION_VOIP\fP \fP" 1c
Process signal for improved speech intelligibility\&. 
.IP "\fB\fBOPUS_APPLICATION_AUDIO\fP \fP" 1c
Favor faithfulness to the original input\&. 
.IP "\fB\fBOPUS_APPLICATION_RESTRICTED_LOWDELAY\fP \fP" 1c
Configure the minimum possible coding delay by disabling certain modes of operation\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_BITRATE(x)"

.PP
Gets the encoder's bitrate configuration\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_BITRATE\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns the bitrate in bits per second\&. The default is determined based on the number of channels and the input sampling rate\&. 
.RE
.PP

.SS "#define OPUS_GET_COMPLEXITY(x)"

.PP
Gets the encoder's complexity configuration\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_COMPLEXITY\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns a value in the range 0-10, inclusive\&. 
.RE
.PP

.SS "#define OPUS_GET_DTX(x)"

.PP
Gets encoder's configured use of discontinuous transmission\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_DTX\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB0\fP" 1c
DTX disabled (default)\&. 
.IP "\fB1\fP" 1c
DTX enabled\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_EXPERT_FRAME_DURATION(x)"

.PP
Gets the encoder's configured use of variable duration frames\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_EXPERT_FRAME_DURATION\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fBOPUS_FRAMESIZE_ARG\fP" 1c
Select frame size from the argument (default)\&. 
.IP "\fBOPUS_FRAMESIZE_2_5_MS\fP" 1c
Use 2\&.5 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_5_MS\fP" 1c
Use 5 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_10_MS\fP" 1c
Use 10 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_20_MS\fP" 1c
Use 20 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_40_MS\fP" 1c
Use 40 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_60_MS\fP" 1c
Use 60 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_80_MS\fP" 1c
Use 80 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_100_MS\fP" 1c
Use 100 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_120_MS\fP" 1c
Use 120 ms frames\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_FORCE_CHANNELS(x)"

.PP
Gets the encoder's forced channel configuration\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_FORCE_CHANNELS\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: 
.IP "\fB\fBOPUS_AUTO\fP\fP" 1c
Not forced (default) 
.IP "\fB1 \fP" 1c
Forced mono 
.IP "\fB2 \fP" 1c
Forced stereo 
.PP
.RE
.PP

.SS "#define OPUS_GET_INBAND_FEC(x)"

.PP
Gets encoder's configured use of inband forward error correction\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_INBAND_FEC\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB0\fP" 1c
Inband FEC disabled (default)\&. 
.IP "\fB1\fP" 1c
Inband FEC enabled\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_LOOKAHEAD(x)"

.PP
Gets the total samples of delay added by the entire codec\&. This can be queried by the encoder and then the provided number of samples can be skipped on from the start of the decoder's output to provide time aligned input and output\&. From the perspective of a decoding application the real data begins this many samples late\&.
.PP
The decoder contribution to this delay is identical for all decoders, but the encoder portion of the delay may vary from implementation to implementation, version to version, or even depend on the encoder's initial configuration\&. Applications needing delay compensation should call this CTL rather than hard-coding a value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Number of lookahead samples 
.RE
.PP

.SS "#define OPUS_GET_LSB_DEPTH(x)"

.PP
Gets the encoder's configured signal depth\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_LSB_DEPTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Input precision in bits, between 8 and 24 (default: 24)\&. 
.RE
.PP

.SS "#define OPUS_GET_MAX_BANDWIDTH(x)"

.PP
Gets the encoder's configured maximum allowed bandpass\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_MAX_BANDWIDTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Allowed values: 
.IP "\fB\fBOPUS_BANDWIDTH_NARROWBAND\fP \fP" 1c
4 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_MEDIUMBAND\fP \fP" 1c
6 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_WIDEBAND\fP \fP" 1c
8 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_SUPERWIDEBAND\fP\fP" 1c
12 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_FULLBAND\fP \fP" 1c
20 kHz passband (default) 
.PP
.RE
.PP

.SS "#define OPUS_GET_PACKET_LOSS_PERC(x)"

.PP
Gets the encoder's configured packet loss percentage\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_PACKET_LOSS_PERC\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns the configured loss percentage in the range 0-100, inclusive (default: 0)\&. 
.RE
.PP

.SS "#define OPUS_GET_PREDICTION_DISABLED(x)"

.PP
Gets the encoder's configured prediction status\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_PREDICTION_DISABLED\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB0\fP" 1c
Prediction enabled (default)\&. 
.IP "\fB1\fP" 1c
Prediction disabled\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_SIGNAL(x)"

.PP
Gets the encoder's configured signal type\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_SIGNAL\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB\fBOPUS_AUTO\fP \fP" 1c
(default) 
.IP "\fB\fBOPUS_SIGNAL_VOICE\fP\fP" 1c
Bias thresholds towards choosing LPC or Hybrid modes\&. 
.IP "\fB\fBOPUS_SIGNAL_MUSIC\fP\fP" 1c
Bias thresholds towards choosing MDCT modes\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_VBR(x)"

.PP
Determine if variable bitrate (VBR) is enabled in the encoder\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_VBR\fP 
.PP
\fBOPUS_GET_VBR_CONSTRAINT\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB0\fP" 1c
Hard CBR\&. 
.IP "\fB1\fP" 1c
VBR (default)\&. The exact type of VBR may be retrieved via \fBOPUS_GET_VBR_CONSTRAINT\fP\&. 
.PP
.RE
.PP

.SS "#define OPUS_GET_VBR_CONSTRAINT(x)"

.PP
Determine if constrained VBR is enabled in the encoder\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_SET_VBR_CONSTRAINT\fP 
.PP
\fBOPUS_GET_VBR\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32 *\fP: Returns one of the following values: 
.IP "\fB0\fP" 1c
Unconstrained VBR\&. 
.IP "\fB1\fP" 1c
Constrained VBR (default)\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_APPLICATION(x)"

.PP
Configures the encoder's intended application\&. The initial value is a mandatory argument to the encoder_create function\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_APPLICATION\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Returns one of the following values: 
.IP "\fB\fBOPUS_APPLICATION_VOIP\fP \fP" 1c
Process signal for improved speech intelligibility\&. 
.IP "\fB\fBOPUS_APPLICATION_AUDIO\fP \fP" 1c
Favor faithfulness to the original input\&. 
.IP "\fB\fBOPUS_APPLICATION_RESTRICTED_LOWDELAY\fP \fP" 1c
Configure the minimum possible coding delay by disabling certain modes of operation\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_BANDWIDTH(x)"

.PP
Sets the encoder's bandpass to a specific value\&. This prevents the encoder from automatically selecting the bandpass based on the available bitrate\&. If an application knows the bandpass of the input audio it is providing, it should normally use \fBOPUS_SET_MAX_BANDWIDTH\fP instead, which still gives the encoder the freedom to reduce the bandpass when the bitrate becomes too low, for better overall quality\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_BANDWIDTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB\fBOPUS_AUTO\fP \fP" 1c
(default) 
.IP "\fB\fBOPUS_BANDWIDTH_NARROWBAND\fP \fP" 1c
4 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_MEDIUMBAND\fP \fP" 1c
6 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_WIDEBAND\fP \fP" 1c
8 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_SUPERWIDEBAND\fP\fP" 1c
12 kHz passband 
.IP "\fB\fBOPUS_BANDWIDTH_FULLBAND\fP \fP" 1c
20 kHz passband 
.PP
.RE
.PP

.SS "#define OPUS_SET_BITRATE(x)"

.PP
Configures the bitrate in the encoder\&. Rates from 500 to 512000 bits per second are meaningful, as well as the special values \fBOPUS_AUTO\fP and \fBOPUS_BITRATE_MAX\fP\&. The value \fBOPUS_BITRATE_MAX\fP can be used to cause the codec to use as much rate as it can, which is useful for controlling the rate by adjusting the output buffer size\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_BITRATE\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Bitrate in bits per second\&. The default is determined based on the number of channels and the input sampling rate\&. 
.RE
.PP

.SS "#define OPUS_SET_COMPLEXITY(x)"

.PP
Configures the encoder's computational complexity\&. The supported range is 0-10 inclusive with 10 representing the highest complexity\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_COMPLEXITY\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 0-10, inclusive\&. 
.RE
.PP

.SS "#define OPUS_SET_DTX(x)"

.PP
Configures the encoder's use of discontinuous transmission (DTX)\&. 
.PP
\fBNote:\fP
.RS 4
This is only applicable to the LPC layer 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_DTX\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB0\fP" 1c
Disable DTX (default)\&. 
.IP "\fB1\fP" 1c
Enabled DTX\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_EXPERT_FRAME_DURATION(x)"

.PP
Configures the encoder's use of variable duration frames\&. When variable duration is enabled, the encoder is free to use a shorter frame size than the one requested in the opus_encode*() call\&. It is then the user's responsibility to verify how much audio was encoded by checking the ToC byte of the encoded packet\&. The part of the audio that was not encoded needs to be resent to the encoder for the next call\&. Do not use this option unless you \fBreally\fP know what you are doing\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_EXPERT_FRAME_DURATION\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fBOPUS_FRAMESIZE_ARG\fP" 1c
Select frame size from the argument (default)\&. 
.IP "\fBOPUS_FRAMESIZE_2_5_MS\fP" 1c
Use 2\&.5 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_5_MS\fP" 1c
Use 5 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_10_MS\fP" 1c
Use 10 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_20_MS\fP" 1c
Use 20 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_40_MS\fP" 1c
Use 40 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_60_MS\fP" 1c
Use 60 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_80_MS\fP" 1c
Use 80 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_100_MS\fP" 1c
Use 100 ms frames\&. 
.IP "\fBOPUS_FRAMESIZE_120_MS\fP" 1c
Use 120 ms frames\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_FORCE_CHANNELS(x)"

.PP
Configures mono/stereo forcing in the encoder\&. This can force the encoder to produce packets encoded as either mono or stereo, regardless of the format of the input audio\&. This is useful when the caller knows that the input signal is currently a mono source embedded in a stereo stream\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_FORCE_CHANNELS\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB\fBOPUS_AUTO\fP\fP" 1c
Not forced (default) 
.IP "\fB1 \fP" 1c
Forced mono 
.IP "\fB2 \fP" 1c
Forced stereo 
.PP
.RE
.PP

.SS "#define OPUS_SET_INBAND_FEC(x)"

.PP
Configures the encoder's use of inband forward error correction (FEC)\&. 
.PP
\fBNote:\fP
.RS 4
This is only applicable to the LPC layer 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_INBAND_FEC\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB0\fP" 1c
Disable inband FEC (default)\&. 
.IP "\fB1\fP" 1c
Enable inband FEC\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_LSB_DEPTH(x)"

.PP
Configures the depth of signal being encoded\&. This is a hint which helps the encoder identify silence and near-silence\&. It represents the number of significant bits of linear intensity below which the signal contains ignorable quantization or other noise\&.
.PP
For example, \fBOPUS_SET_LSB_DEPTH(14)\fP would be an appropriate setting for G\&.711 u-law input\&. \fBOPUS_SET_LSB_DEPTH(16)\fP would be appropriate for 16-bit linear pcm input with \fBopus_encode_float()\fP\&.
.PP
When using \fBopus_encode()\fP instead of \fBopus_encode_float()\fP, or when libopus is compiled for fixed-point, the encoder uses the minimum of the value set here and the value 16\&.
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_LSB_DEPTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Input precision in bits, between 8 and 24 (default: 24)\&. 
.RE
.PP

.SS "#define OPUS_SET_MAX_BANDWIDTH(x)"

.PP
Configures the maximum bandpass that the encoder will select automatically\&. Applications should normally use this instead of \fBOPUS_SET_BANDWIDTH\fP (leaving that set to the default, \fBOPUS_AUTO\fP)\&. This allows the application to set an upper bound based on the type of input it is providing, but still gives the encoder the freedom to reduce the bandpass when the bitrate becomes too low, for better overall quality\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_MAX_BANDWIDTH\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fBOPUS_BANDWIDTH_NARROWBAND \fP" 1c
4 kHz passband 
.IP "\fBOPUS_BANDWIDTH_MEDIUMBAND \fP" 1c
6 kHz passband 
.IP "\fBOPUS_BANDWIDTH_WIDEBAND \fP" 1c
8 kHz passband 
.IP "\fBOPUS_BANDWIDTH_SUPERWIDEBAND\fP" 1c
12 kHz passband 
.IP "\fBOPUS_BANDWIDTH_FULLBAND \fP" 1c
20 kHz passband (default) 
.PP
.RE
.PP

.SS "#define OPUS_SET_PACKET_LOSS_PERC(x)"

.PP
Configures the encoder's expected packet loss percentage\&. Higher values trigger progressively more loss resistant behavior in the encoder at the expense of quality at a given bitrate in the absence of packet loss, but greater quality under loss\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_PACKET_LOSS_PERC\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Loss percentage in the range 0-100, inclusive (default: 0)\&. 
.RE
.PP

.SS "#define OPUS_SET_PREDICTION_DISABLED(x)"

.PP
If set to 1, disables almost all use of prediction, making frames almost completely independent\&. This reduces quality\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_PREDICTION_DISABLED\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB0\fP" 1c
Enable prediction (default)\&. 
.IP "\fB1\fP" 1c
Disable prediction\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_SIGNAL(x)"

.PP
Configures the type of signal being encoded\&. This is a hint which helps the encoder's mode selection\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_SIGNAL\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB\fBOPUS_AUTO\fP \fP" 1c
(default) 
.IP "\fB\fBOPUS_SIGNAL_VOICE\fP\fP" 1c
Bias thresholds towards choosing LPC or Hybrid modes\&. 
.IP "\fB\fBOPUS_SIGNAL_MUSIC\fP\fP" 1c
Bias thresholds towards choosing MDCT modes\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_VBR(x)"

.PP
Enables or disables variable bitrate (VBR) in the encoder\&. The configured bitrate may not be met exactly because frames must be an integer number of bytes in length\&. 
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_VBR\fP 
.PP
\fBOPUS_SET_VBR_CONSTRAINT\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB0\fP" 1c
Hard CBR\&. For LPC/hybrid modes at very low bit-rate, this can cause noticeable quality degradation\&. 
.IP "\fB1\fP" 1c
VBR (default)\&. The exact type of VBR is controlled by \fBOPUS_SET_VBR_CONSTRAINT\fP\&. 
.PP
.RE
.PP

.SS "#define OPUS_SET_VBR_CONSTRAINT(x)"

.PP
Enables or disables constrained VBR in the encoder\&. This setting is ignored when the encoder is in CBR mode\&. 
.PP
\fBWarning:\fP
.RS 4
Only the MDCT mode of Opus currently heeds the constraint\&. Speech mode ignores it completely, hybrid mode may fail to obey it if the LPC layer uses more bitrate than the constraint would have permitted\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBOPUS_GET_VBR_CONSTRAINT\fP 
.PP
\fBOPUS_SET_VBR\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP \fCopus_int32\fP: Allowed values: 
.IP "\fB0\fP" 1c
Unconstrained VBR\&. 
.IP "\fB1\fP" 1c
Constrained VBR (default)\&. This creates a maximum of one frame of buffering delay assuming a transport with a serialization speed of the nominal bitrate\&. 
.PP
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Opus from the source code\&.
